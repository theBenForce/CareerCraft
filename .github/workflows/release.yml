name: Release

on:
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  deploy-production:
    runs-on: ubuntu-latest
    # Uncomment and configure the environment below if you want to use GitHub Environment protection rules
    # environment: production
    
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract release version
        id: release
        run: |
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          echo "major_version=$(echo ${GITHUB_REF#refs/tags/} | cut -d. -f1)" >> $GITHUB_OUTPUT

      - name: Build and push release image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.release.outputs.version }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.release.outputs.major_version }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:stable
          labels: |
            org.opencontainers.image.title=Career Craft
            org.opencontainers.image.description=Professional career and networking management application
            org.opencontainers.image.vendor=${{ github.repository_owner }}
            org.opencontainers.image.version=${{ steps.release.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Update deployment
        run: |
          echo "üöÄ Release ${{ steps.release.outputs.version }} has been built and pushed!"
          echo "üì¶ Docker images available:"
          echo "  - ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.release.outputs.version }}"
          echo "  - ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.release.outputs.major_version }}"
          echo "  - ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:stable"

  notify-release:
    runs-on: ubuntu-latest
    needs: deploy-production
    if: always()
    
    steps:
      - name: Release notification
        run: |
          if [ "${{ needs.deploy-production.result }}" == "success" ]; then
            echo "‚úÖ Release deployment successful!"
          else
            echo "‚ùå Release deployment failed!"
            exit 1
          fi
