generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id              Int              @id @default(autoincrement())
  email           String           @unique
  password        String
  firstName       String
  lastName        String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  activities      Activity[]
  companies       Company[]
  contacts        Contact[]
  jobApplications JobApplication[]
  tags            Tag[]
}

model Company {
  id              Int              @id @default(autoincrement())
  name            String
  industry        String?
  description     String?
  location        String?
  size            String?
  logo            String?
  notes           String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  userId          Int
  activities      Activity[]
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  contacts        Contact[]
  jobApplications JobApplication[]
  companyTags     CompanyTag[]
  links           Link[]
}

model Contact {
  id               Int               @id @default(autoincrement())
  firstName        String
  lastName         String
  email            String?
  phone            String?
  position         String?
  department       String?
  image            String?
  summary          String?
  notes            String?
  lastContactDate  DateTime?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  userId           Int
  companyId        Int?
  activityContacts ActivityContact[]
  company          Company?          @relation(fields: [companyId], references: [id])
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  contactTags      ContactTag[]
  links            Link[]
}

model JobApplication {
  id             Int        @id @default(autoincrement())
  position       String
  status         String
  priority       String     @default("medium")
  jobDescription String?
  salary         String?
  appliedDate    DateTime
  responseDate   DateTime?
  interviewDate  DateTime?
  offerDate      DateTime?
  notes          String?
  source         String?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  userId         Int
  companyId      Int
  activities     Activity[]
  company        Company    @relation(fields: [companyId], references: [id], onDelete: Cascade)
  user           User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  links          Link[]
}

model Activity {
  id               Int               @id @default(autoincrement())
  type             String            // ActivityType: EMAIL, PHONE_CALL, MEETING, INTERVIEW, NETWORKING_EVENT, COFFEE_CHAT, FOLLOW_UP, APPLICATION, REFERRAL, LINKEDIN_MESSAGE, NOTE, RESEARCH, OTHER
  title            String?
  subject          String
  description      String?
  date             DateTime
  duration         Int?
  note             String?
  followUpDate     DateTime?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  userId           Int
  companyId        Int?
  jobApplicationId Int?
  jobApplication   JobApplication?   @relation(fields: [jobApplicationId], references: [id])
  company          Company?          @relation(fields: [companyId], references: [id])
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  activityContacts ActivityContact[]
  activityTags     ActivityTag[]
}

model ActivityContact {
  id         Int      @id @default(autoincrement())
  activityId Int
  contactId  Int
  createdAt  DateTime @default(now())
  contact    Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade)
  activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)

  @@unique([activityId, contactId])
}

model Tag {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  color        String?       // Optional color for visual organization
  description  String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  userId       Int
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  contactTags  ContactTag[]
  companyTags  CompanyTag[]
  activityTags ActivityTag[]
}

model ContactTag {
  id        Int      @id @default(autoincrement())
  contactId Int
  tagId     Int
  createdAt DateTime @default(now())
  contact   Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade)
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([contactId, tagId])
}

model CompanyTag {
  id        Int      @id @default(autoincrement())
  companyId Int
  tagId     Int
  createdAt DateTime @default(now())
  company   Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([companyId, tagId])
}

model ActivityTag {
  id         Int      @id @default(autoincrement())
  activityId Int
  tagId      Int
  createdAt  DateTime @default(now())
  activity   Activity @relation(fields: [activityId], references: [id], onDelete: Cascade)
  tag        Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([activityId, tagId])
}

model Link {
  id               Int             @id @default(autoincrement())
  url              String
  label            String?         // e.g., "LinkedIn", "Website", "Twitter", "Glassdoor"
  companyId        Int?
  contactId        Int?
  jobApplicationId Int?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  company          Company?        @relation(fields: [companyId], references: [id], onDelete: Cascade)
  contact          Contact?        @relation(fields: [contactId], references: [id], onDelete: Cascade)
  jobApplication   JobApplication? @relation(fields: [jobApplicationId], references: [id], onDelete: Cascade)
}
