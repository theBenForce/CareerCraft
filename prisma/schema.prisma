// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id              Int              @id @default(autoincrement())
  email           String           @unique
  password        String
  firstName       String
  lastName        String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  jobApplications JobApplication[]
  contacts        Contact[]
  companies       Company[]
  activities      Activity[]
  notes           Note[]
}

model Company {
  id              Int              @id @default(autoincrement())
  name            String
  industry        String?
  website         String?
  description     String?
  location        String?
  size            String?
  notes           String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          Int
  jobApplications JobApplication[]
  contacts        Contact[]
  activities      Activity[]
}

model Contact {
  id               Int              @id @default(autoincrement())
  firstName        String
  lastName         String
  email            String?
  phone            String?
  position         String?
  department       String?
  linkedinUrl      String?
  notes            String?
  lastContactDate  DateTime?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           Int
  company          Company?         @relation(fields: [companyId], references: [id], onDelete: SetNull)
  companyId        Int?
  activities       Activity[]
}

model JobApplication {
  id              Int       @id @default(autoincrement())
  position        String
  status          String    // applied, interview_scheduled, interviewed, offer, rejected, accepted
  priority        String    @default("medium") // low, medium, high
  jobDescription  String?
  salary          String?
  appliedDate     DateTime
  responseDate    DateTime?
  interviewDate   DateTime?
  offerDate       DateTime?
  notes           String?
  jobUrl          String?
  source          String?   // linkedin, company_website, referral, etc
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          Int
  company         Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId       Int
  activities      Activity[]
}

model Activity {
  id               Int             @id @default(autoincrement())
  type             String          // email, call, meeting, application, interview, note
  subject          String
  description      String?
  date             DateTime
  duration         Int?            // in minutes
  outcome          String?
  followUpDate     DateTime?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  user             User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           Int
  company          Company?        @relation(fields: [companyId], references: [id], onDelete: SetNull)
  companyId        Int?
  contact          Contact?        @relation(fields: [contactId], references: [id], onDelete: SetNull)
  contactId        Int?
  jobApplication   JobApplication? @relation(fields: [jobApplicationId], references: [id], onDelete: SetNull)
  jobApplicationId Int?
}

model Note {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  tags      String?  // JSON array of tags
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
}

